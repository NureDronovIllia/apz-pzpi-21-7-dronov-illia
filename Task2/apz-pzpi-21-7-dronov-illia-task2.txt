1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ


Користувачами розробленої системи є 2 типи акторів: працівник та адміністратор. 
Взаємодію кожної ролі користувачів з системою представлено на діаграмі прецедентів (див. рис. 1).
Таким чином, за допомогою діаграми прецедентів було визначено функціональні потреби та взаємодію різних типів користувачів із системою.


2 ПРОЄКТУВАННЯ БАЗИ ДАНИХ


Для проєктування бази даних було розроблено ER-модель даних (див. рис. 2). Вона складається з 8 таблиць: постачальники палива (fuel_suppliers), ємності з паливом (fuel_storages), замовлення (purchases), користувачі (users), робочі зміни (shifts), транспортні засоби (ТЗ) (vehicles), інспекції ТЗ (inspections),  статуси (statuses).

У базі даних наявні наступні зв’язки між сутностями:
-	постачальник / сховище палива  та замовлення мають зв’язок один до багатьох, бо в одному замовленні може брати участь тільки один постачальник / сховище;
-	користувач та замовлення мають зв’язок один до багатьох, бо користувач може робити багато замовлень;
-	користувач та інспекція мають зв’язок один до багатьох, бо один користувач може проводити багато інспекцій;
-	користувач та зміна мають зв’язок один до багатьох, бо один користувач може виходити на багато змін;
-	транспортний засіб та інспекція мають зв’язок один до багатьох, бо один транспортний засіб може приймати участь у багатьох інспекціях;
-	транспортний засіб та зміна мають зв’язок один до багатьох, бо один транспортний засіб може бути використаних на багатьох змінах;
-	транспортний засіб та статус мають зв’язок один до багатьох, бо один транспортний засіб може мати багато статусів.


3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ


Для написання серверної частини системи було обрано мову програмування Python з використанням веб-фреймворку FastAPI.
У якості бази даних використано PostgreSQL, до якої з серверного застосунка здійснюється доступ за допомогою технології SQLAlchemy, що надає зручний інтерфейс для взаємодії з базами даних у вигляді об’єктів сутностей.
Для більш детальної візуалізації використаних технологій було розроблено діаграму розгортання (див. рис. 3).


4 СПЕЦИФІКАЦІЯ REST


REST API в розробленому проєкті складається з 28 кінцевих точок. Кожна кінцева точка відповідає за надання даних та виконання бізнес логіки.
Специфікація кожної кінцевої точки REST API проєкту наведена у таблиці 1.


ВИСНОВКИ


У ході виконання лабораторної роботи були отримані навички з проектування серверної частини програмної системи, розробки сценаріїв використання, діаграм розгортання та пакетів, проектуванні бази даних. Була розроблена програмна реалізація серверної частини програмної системи. При розробці продукту дотримувались вимоги до чистого коду мови програмування Python.
