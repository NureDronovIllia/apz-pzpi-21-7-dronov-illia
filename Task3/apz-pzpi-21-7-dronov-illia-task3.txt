1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

IoT частини розробленої системи взаємодіє з одним типом користувачів, а саме з адміністраторами. Пристрій відправляє дані з датчиків рівня палива. Адміністратор може переглядати ці дані у режимі реального часу. Крім того, якщо рівень палива у сховищі опуститься нижче критично допустимого, адміністратору буде надіслано повідомлення про те, що це сховище потребує закупівлі палива.
Взаємодія користувача з IoT частиною системи представлено на діаграмі прецедентів (див. рис. 1).
Рисунок 1 – Діаграма прецедентів IoT частини системи «Fleet Fuel Monitoring»
Таким чином, за допомогою діаграми прецедентів було окреслено функціональні вимоги до IoT частини.

2 ПРОГРАМНА РЕАЛІЗАЦІЯ

Для демонстрації функціональних можливостей розумного пристрою системи моніторингу рівня палива у сховищах реалізовано на мові програмування Python. Програмна реалізація буде максимально наближена до пристроїв RaspberryPi, які можуть запускати програми на Python. 
В програмному забезпечені дані надсилаються за допомогою бібліотеку
requests, у форматі JSON.
Програмне забезпечення структуроване на модулі, кожен з яких
відповідає за певну функціональність (приклади коду див. додат. В):
-   main.py: головний модуль для запуску пристрою для подальшої демонстрації програмної реалізації;
-   auth.py: модуль для авторизації та аутентифікації пристрою для отримання jwt-токена, потрібного для проведення демонстраційних операцій;
-   api_fetch.py: модуль для взаємодією з бізнес-логікою backend-додатку;
-   config.py: модуль для маніпулювання локальними даними iot-пристрою;
-   services: модуль з бізнес логікою iot-пристрою;


3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

Для написання програмної реалізації Iot пристрою було обрано мову Python. Її було обрано за простоту використання, велике різноманіття бібліотек та придатність для обробки та аналізу даних.
Для шифрування та розшифрування даних у форматі JSON було використано однойменну бібліотеку json. Сама програма складається з одного основного модуля та трьох допоміжних. Для більш детальної візуалізації архітектури та використаних технологій було розроблено діаграму пакетів (див. рис. 2).
Рисунок 2 - Діаграма пакетів Iot-частини системи «Fleet Fuel Monitoring»

ВИСНОВКИ
У ході виконання лабораторної роботи були отримані навички з проєктування IoT частини програмної системи. Результатом роботи є розроблена програмна реалізація IoT програмної частини. При розробці продукту дотримувались вимоги до чистого коду мови програмування Python.
